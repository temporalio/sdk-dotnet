// <auto-generated>
//     Generated. DO NOT EDIT!
// </auto-generated>
#pragma warning disable 8669
using System.Threading.Tasks;
using Temporalio.Api.TestService.V1;

namespace Temporalio.Client
{
    public abstract partial class TestService
    {
        /// <summary>
        /// Invoke GetCurrentTime.
        /// </summary>
        /// <param name="req">Request for the call.</param>
        /// <param name="options">Optional RPC options.</param>
        /// <returns>RPC response</returns>
        public async Task<GetCurrentTimeResponse> GetCurrentTimeAsync(Google.Protobuf.WellKnownTypes.Empty req, RpcOptions? options = null)
        {
            return await InvokeRpcAsync("GetCurrentTime", req, GetCurrentTimeResponse.Parser, options);
        }

        /// <summary>
        /// Invoke LockTimeSkipping.
        /// </summary>
        /// <param name="req">Request for the call.</param>
        /// <param name="options">Optional RPC options.</param>
        /// <returns>RPC response</returns>
        public async Task<LockTimeSkippingResponse> LockTimeSkippingAsync(LockTimeSkippingRequest req, RpcOptions? options = null)
        {
            return await InvokeRpcAsync("LockTimeSkipping", req, LockTimeSkippingResponse.Parser, options);
        }

        /// <summary>
        /// Invoke Sleep.
        /// </summary>
        /// <param name="req">Request for the call.</param>
        /// <param name="options">Optional RPC options.</param>
        /// <returns>RPC response</returns>
        public async Task<SleepResponse> SleepAsync(SleepRequest req, RpcOptions? options = null)
        {
            return await InvokeRpcAsync("Sleep", req, SleepResponse.Parser, options);
        }

        /// <summary>
        /// Invoke SleepUntil.
        /// </summary>
        /// <param name="req">Request for the call.</param>
        /// <param name="options">Optional RPC options.</param>
        /// <returns>RPC response</returns>
        public async Task<SleepResponse> SleepUntilAsync(SleepUntilRequest req, RpcOptions? options = null)
        {
            return await InvokeRpcAsync("SleepUntil", req, SleepResponse.Parser, options);
        }

        /// <summary>
        /// Invoke UnlockTimeSkipping.
        /// </summary>
        /// <param name="req">Request for the call.</param>
        /// <param name="options">Optional RPC options.</param>
        /// <returns>RPC response</returns>
        public async Task<UnlockTimeSkippingResponse> UnlockTimeSkippingAsync(UnlockTimeSkippingRequest req, RpcOptions? options = null)
        {
            return await InvokeRpcAsync("UnlockTimeSkipping", req, UnlockTimeSkippingResponse.Parser, options);
        }

        /// <summary>
        /// Invoke UnlockTimeSkippingWithSleep.
        /// </summary>
        /// <param name="req">Request for the call.</param>
        /// <param name="options">Optional RPC options.</param>
        /// <returns>RPC response</returns>
        public async Task<SleepResponse> UnlockTimeSkippingWithSleepAsync(SleepRequest req, RpcOptions? options = null)
        {
            return await InvokeRpcAsync("UnlockTimeSkippingWithSleep", req, SleepResponse.Parser, options);
        }
    }
}